{
	"information_for_contributors": [
		"This file is modified from https://github.com/atom/language-go/blob/master/grammars/go.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"name": "lucy",
	"scopeName": "source.lucy",
	"comment": "lucy language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"comment": "Interpreted string literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lucy"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lucy"
				}
			},
			"name": "string.quoted.double.lucy",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lucy"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lucy"
				}
			},
			"name": "string.quoted.raw.lucy",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "\\b0[0-7]*[89]\\d*\\b",
			"name": "invalid.illegal.numeric.lucy"
		},
		{
			"comment": "Built-in functions",
			"match": "\\b(copy|len|make|panic|print|printf|catch|assert|blackHole)\\b(?=\\()",
			"name": "support.function.builtin.lucy"
		},
		{
			"comment": "Floating-point literals",
			"match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?",
			"name": "constant.numeric.floating-point.lucy"
		},
		{
			"comment": "Integers",
			"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
			"name": "constant.numeric.integer.lucy"
		},
		{
			"comment": "Language constants",
			"match": "\\b(true|false|null)\\b",
			"name": "constant.language.lucy"
		},
		{
			"begin": "\\b(var)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.var.lucy"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#variables"
				}
			]
		},
		{
			"match": "(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.lucy"
						},
						{
							"match": "\\w+(?:\\.\\w+)*",
							"name": "variable.other.assignment.lucy",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.lucy"
						},
						{
							"match": "\\w+",
							"name": "variable.other.assignment.lucy"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.lucy"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.lucy"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.lucy"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.lucy"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.lucy"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.lucy"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.lucy"
						}
					},
					"name": "comment.block.lucy"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lucy"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.lucy"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.lucy"
				},
				{
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.lucy"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.lucy"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "\\b(break|case|continue|default|defer|else|for|go|goto|if|range|pass|return|switch|when)\\b",
					"name": "keyword.control.lucy"
				},
				{
					"match": "\\bconst\\b",
					"name": "keyword.const.lucy"
				},
				{
					"match": "\\bfn\\b",
					"name": "keyword.function.lucy"
				},
				{
					"match": "\\bas\\b",
					"name": "keyword.as.lucy"
				},
				{
					"match": "\\btypealias\\b",
					"name": "keyword.typealias.lucy"
				},
				{
					"match": "\\btype\\b",
					"name": "keyword.type.lucy"
				},
				{
					"match": "\\binterface\\b",
					"name": "keyword.interface.lucy"
				},
				{
					"match": "\\b(extends|implements)\\b",
					"name": "keyword.extends.lucy"
				},
				{
					"match": "\\bmap\\b",
					"name": "keyword.map.lucy"
				},
				{
					"match": "\\bthis\\b",
					"name": "keyword.this.lucy"
				},
				{
					"match": "\\bclass\\b",
					"name": "keyword.class.lucy"
				},
				{
					"match": "\\benum\\b",
					"name": "keyword.enum.lucy"
				},
				{
					"match": "\\bglobal\\b",
					"name": "keyword.global.lucy"
				},
				{
					"comment": "access control",
					"match": "\\bpublic|protected|private\\b",
					"name": "keyword.access.control.lucy"
				},
				{
					"comment": "static",
					"match": "\\bstatic\\b",
					"name": "keyword.static.lucy"
				},
				{
					"comment": "new",
					"match": "\\bnew\\b",
					"name": "keyword.new.lucy"
                },

				{
					"comment": "modifier",
					"match": "\\b(volatile|synchronized|final|abstract)\\b",
					"name": "keyword.modifier.lucy"
				}

			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(\\*|&)(?=\\w)",
					"name": "keyword.operator.address.lucy"
				},
				{
					"match": "<\\-",
					"name": "keyword.operator.channel.lucy"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.lucy"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.lucy"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.lucy"
				},
				{
					"match": "(&&|\\|\\||!)",
					"name": "keyword.operator.logical.lucy"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.lucy"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.lucy"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
					"name": "keyword.operator.arithmetic.bitwise.lucy"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.lucy"
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\bbool\\b",
					"name": "storage.type.boolean.lucy"
				},
				{
					"match": "\\bbyte\\b",
					"name": "storage.type.byte.lucy"
				},
				{
					"match": "\\b(float|double|char|int|long|short)\\b",
					"name": "storage.type.numeric.lucy"
				},
				{
					"match": "\\bstring\\b",
					"name": "storage.type.string.lucy"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.lucy"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.lucy"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
					"name": "constant.other.placeholder.lucy"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.lucy"
								},
								{
									"match": "\\w+",
									"name": "variable.other.assignment.lucy"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.lucy"
								},
								{
									"match": "\\w+",
									"name": "variable.other.declaration.lucy"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variables.begin.bracket.round.lucy"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.lucy"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		}
	}
}